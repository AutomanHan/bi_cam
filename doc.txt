工程名：bi_cam
简介：
整个工程大体分为两个部分的代码：
（1）关于小觅相机的图像获取，标定，校正和获取视差图，主要使用opencv库进行处理；
（2）对人加相机获取的点云进行处理，包括点云文件读取，降低分辨率，

（1）bi_cam.h和bi_cam.cpp文件：
collect_image(string save_path):标定板图像采集，参数为图片的存储位置
calib_single(string imglist)： 单目标定函数，参数为xml文件的位置（因在双目中没用用到，没有实现）
calib_bino(int w, int h, float s, string filename): 双目立体标定函数，参数w:标定板内角点数量 h:标定板内焦点数量 s: 标定板每个棋盘的实际尺寸，单位mm filename:xml文件位置
get_disparity(const Mat &left, const Mat &right, Mat &imgDisparity16S, Mat &imgDisparity8U) 由左右视图获取视差图，left, right代表左右图像，imgDisparity16S表示16位的二维图像，imgDisparity8U 8位二维图像
get_depth(const Mat& dispMap, Mat &depthMap, Mat k) 根据视差图计算深度图， k为相机内参矩阵
get_point(const Mat& depthMap, PointCloud<PointXYZ>::Ptr pc, Mat k) 根据深度图计算得到点云，k为相机内参矩阵
manual_exposure(int gain, int brightness, int contrast) 手动调节小觅双目的参数，gain增益，brightness亮度，contrast对比度
undistortrectiry(const Mat& left_src,const Mat& right_src, const cam_paras& paras, Mat &left_rec, Mat &right_rec) 获取去畸变后的图像， paras是相机参数
show_pointclouds(string file_path) 显示获取的点云

（2）pc_process.h和pc_process.cpp文件：
get_pointcloud() 获取点云，需要指定点云存储路径
preprocess_pointcloud 点云预处理，主要包括采用体素滤波法进行降采样，
seg_plane(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_src, pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_filter, pcl::PointCloud<pcl::PointXYZ>::Ptr plane) 分割平面，输出两个点云，平面和去除平面后的其他部分；
ec_object(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_src, std::vector<pcl::PointCloud<pcl::PointXYZ> > &cc_vec)使用欧式距离进行聚类，获取点云集合；
extract_object(const std::vector<pcl::PointCloud<pcl::PointXYZ> > &vec,const pcl::PointXYZ&  mass_center ,pcl::PointCloud<pcl::PointXYZ>::Ptr object_pc) 获得位于点云集合中心位置的点云；
save_pointcloud1: 保存点云
smooth_pointcloud(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_src, pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_smooth) 点云平滑
get_planemodel(pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_src, Eigen::VectorXf& model_coefficients) 计算得到平面模型的参数，model_coefficients表示平面模型的四个参数
Passthrough_pointcloud: 对工件的每个平面进行滤波
MassCenter_pointcloud 计算点云质心
RegionGrow_pointcloud: 区域增长算法，可用于点云分割
NormalEst_pointcloud: 点云法线估计
KMeanNormal_pointcloud 使用Kmeans算法进行工件平面分割
distance: 计算点云中点之间的欧式距离
distance_normals: 计算点云中法线之间的欧式距离
（3）main.cpp
主要包括了显示点云的函数，和调运pc_process中的函数完成工件抓取点提取
process()点云处理，获取抓取点













